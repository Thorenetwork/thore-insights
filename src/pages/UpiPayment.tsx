
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { QrCode, Send, MessageCircle, Smartphone, Shield, Clock, Languages, CheckCircle, X, Mic, Volume2 } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  language: string;
}

const UpiPayment = () => {
  const [selectedLanguage, setSelectedLanguage] = useState('hindi');
  const [paymentAmount, setPaymentAmount] = useState('');
  const [recipientUpi, setRecipientUpi] = useState('');
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  const languages = {
    hindi: {
      name: 'рд╣рд┐рдВрджреА',
      flag: 'ЁЯЗоЁЯЗ│',
      title: 'UPI рднреБрдЧрддрд╛рди',
      subtitle: 'рддреБрд░рдВрдд, рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рдЖрд╕рд╛рди рдбрд┐рдЬрд┐рдЯрд▓ рднреБрдЧрддрд╛рди',
      amount: 'рд░рд╛рд╢рд┐ рджрд░реНрдЬ рдХрд░реЗрдВ',
      recipient: 'рдкреНрд░рд╛рдкреНрддрдХрд░реНрддрд╛ рдХрд╛ UPI ID',
      payNow: 'рдЕрднреА рднреБрдЧрддрд╛рди рдХрд░реЗрдВ',
      features: {
        instant: 'рддреБрд░рдВрдд рднреБрдЧрддрд╛рди',
        secure: '100% рд╕реБрд░рдХреНрд╖рд┐рдд',
        available: '24/7 рдЙрдкрд▓рдмреНрдз'
      },
      chatbot: {
        title: 'UPI рд╕рд╣рд╛рдпрдХ',
        placeholder: 'рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдпрд╣рд╛рдБ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...',
        welcome: 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ UPI рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рднреБрдЧрддрд╛рди рд╕рдВрдмрдВрдзреА рд╕рднреА рд╕рдорд╕реНрдпрд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред'
      }
    },
    tamil: {
      name: 'родрооро┐ро┤рпН',
      flag: 'ЁЯЗоЁЯЗ│',
      title: 'UPI роХроЯрпНроЯрогроорпН',
      subtitle: 'роЙроЯройроЯро┐, рокро╛родрпБроХро╛рокрпНрокро╛рой рооро▒рпНро▒рпБроорпН роОро│ро┐родро╛рой роЯро┐роЬро┐роЯрпНроЯро▓рпН роХроЯрпНроЯрогроорпН',
      amount: 'родрпКроХрпИропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН',
      recipient: 'рокрпЖро▒рпБроиро░ро┐ройрпН UPI ID',
      payNow: 'роЗрокрпНрокрпЛродрпБ роЪрпЖро▓рпБродрпНродро╡рпБроорпН',
      features: {
        instant: 'роЙроЯройроЯро┐ роХроЯрпНроЯрогроорпН',
        secure: '100% рокро╛родрпБроХро╛рокрпНрокрпБ',
        available: '24/7 роХро┐роЯрпИроХрпНроХрпБроорпН'
      },
      chatbot: {
        title: 'UPI роЙродро╡ро┐ропро╛ро│ро░рпН',
        placeholder: 'роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...',
        welcome: 'ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН UPI роЙродро╡ро┐ропро╛ро│ро░рпН. роХроЯрпНроЯрогроорпН родрпКроЯро░рпНрокро╛рой роЕройрпИродрпНродрпБ рокро┐ро░роЪрпНроЪро┐ройрпИроХро│ро┐ро▓рпБроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН.'
      }
    },
    bengali: {
      name: 'ржмрж╛ржВрж▓рж╛',
      flag: 'ЁЯЗоЁЯЗ│',
      title: 'UPI ржкрзЗржорзЗржирзНржЯ',
      subtitle: 'рждрж╛рзОржХрзНрж╖ржгрж┐ржХ, ржирж┐рж░рж╛ржкржж ржПржмржВ рж╕рж╣ржЬ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржкрзЗржорзЗржирзНржЯ',
      amount: 'ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи',
      recipient: 'ржкрзНрж░рж╛ржкржХрзЗрж░ UPI ID',
      payNow: 'ржПржЦржиржЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзБржи',
      features: {
        instant: 'рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржкрзЗржорзЗржирзНржЯ',
        secure: 'рззрзжрзж% ржирж┐рж░рж╛ржкржж',
        available: 'рзирзк/рзн ржЙржкрж▓ржмрзНржз'
      },
      chatbot: {
        title: 'UPI рж╕рж╣рж╛ржпрж╝ржХ',
        placeholder: 'ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржЯрж╛ржЗржк ржХрж░рзБржи...',
        welcome: 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ UPI рж╕рж╣рж╛ржпрж╝ржХред ржкрзЗржорзЗржирзНржЯ рж╕ржВржХрзНрж░рж╛ржирзНржд рж╕ржм рж╕ржорж╕рзНржпрж╛ржпрж╝ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред'
      }
    }
  };

  const currentLang = languages[selectedLanguage as keyof typeof languages];

  const botResponses: { [key: string]: { [key: string]: string } } = {
    hindi: {
      balance: 'рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рд╢реЗрд╖ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдмреИрдВрдХ рдРрдк рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ рдпрд╛ *99# рдбрд╛рдпрд▓ рдХрд░реЗрдВред',
      limit: 'UPI рдХреА рджреИрдирд┐рдХ рд╕реАрдорд╛ тВ╣1,00,000 рд╣реИред рдпрджрд┐ рдЖрдкрдХреЛ рдЕрдзрд┐рдХ рд░рд╛рд╢рд┐ рднреЗрдЬрдиреА рд╣реИ, рддреЛ рдХрдИ рд▓реЗрди-рджреЗрди рдХрд░реЗрдВред',
      failed: 'рдпрджрд┐ рдЖрдкрдХрд╛ рднреБрдЧрддрд╛рди рдЕрд╕рдлрд▓ рд╣реЛ рдЧрдпрд╛ рд╣реИ, рддреЛ рдкреИрд╕рд╛ 24 рдШрдВрдЯреЗ рдореЗрдВ рд╡рд╛рдкрд╕ рдЖ рдЬрд╛рдПрдЧрд╛ред рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдмреИрдВрдХ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред',
      help: 'рдореИрдВ UPI рднреБрдЧрддрд╛рди, рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди, рдФрд░ рдЦрд╛рддрд╛ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрдиреЛрдВ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред рдХреБрдЫ рдФрд░ рдкреВрдЫрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
    },
    tamil: {
      balance: 'роЙроЩрпНроХро│рпН роХрогроХрпНроХрпБ роиро┐ро▓рпБро╡рпИ роЕро▒ро┐роп, роЙроЩрпНроХро│рпН ро╡роЩрпНроХро┐ роЖрокрпНрокро┐ро▓рпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН роЕро▓рпНро▓родрпБ *99# роЯропро▓рпН роЪрпЖропрпНропро╡рпБроорпН.',
      limit: 'UPI роЗройрпН роиро╛ро│ро╛роирпНрод ро╡ро░роорпНрокрпБ тВ╣1,00,000 роЖроХрпБроорпН. роЕродро┐роХ родрпКроХрпИ роЕройрпБрокрпНрок ро╡рпЗрогрпНроЯрпБроорпЖройро┐ро▓рпН, рокро▓ рокро░ро┐ро╡ро░рпНродрпНродройрпИроХро│рпН роЪрпЖропрпНропро╡рпБроорпН.',
      failed: 'роЙроЩрпНроХро│рпН роХроЯрпНроЯрогроорпН родрпЛро▓рпНро╡ро┐ропрпБро▒рпНро▒ро╛ро▓рпН, рокрогроорпН 24 роорогро┐ роирпЗро░родрпНродро┐ро▓рпН родро┐ро░рпБроорпНрокрпБроорпН. роорпЗро▓рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпБроХрпНроХрпБ ро╡роЩрпНроХро┐ропрпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН.',
      help: 'роиро╛ройрпН UPI роХроЯрпНроЯрогроорпН, рокро┐ро░роЪрпНроЪро┐ройрпИ родрпАро░рпНро╡рпБ рооро▒рпНро▒рпБроорпН роХрогроХрпНроХрпБ родрпКроЯро░рпНрокро╛рой роХрпЗро│рпНро╡ро┐роХро│ро┐ро▓рпН роЙродро╡ роорпБроЯро┐ропрпБроорпН. ро╡рпЗро▒рпБ роПродро╛ро╡родрпБ роХрпЗроЯрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛?'
    },
    bengali: {
      balance: 'ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЬрж╛ржирждрзЗ, ржЖржкржирж╛рж░ ржмрзНржпрж╛ржВржХ ржЕрзНржпрж╛ржкрзЗ рж▓ржЧржЗржи ржХрж░рзБржи ржмрж╛ *99# ржбрж╛ржпрж╝рж╛рж▓ ржХрж░рзБржиред',
      limit: 'UPI ржПрж░ ржжрзИржирж┐ржХ рж╕рзАржорж╛ тВ╣рзз,рзжрзж,рзжрзжрзжред ржмрзЗрж╢рж┐ ржкрж░рж┐ржорж╛ржг ржкрж╛ржарж╛рждрзЗ рж╣рж▓рзЗ, ржПржХрж╛ржзрж┐ржХ рж▓рзЗржиржжрзЗржи ржХрж░рзБржиред',
      failed: 'ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ, ржЯрж╛ржХрж╛ рзирзк ржШржирзНржЯрж╛ржпрж╝ ржлрж┐рж░рзЗ ржЖрж╕ржмрзЗред ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржмрзНржпрж╛ржВржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред',
      help: 'ржЖржорж┐ UPI ржкрзЗржорзЗржирзНржЯ, рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржПржмржВ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржВржХрзНрж░рж╛ржирзНржд ржкрзНрж░рж╢рзНржирзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖрж░ ржХрж┐ржЫрзБ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?'
    }
  };

  useEffect(() => {
    if (chatMessages.length === 0) {
      const welcomeMessage: ChatMessage = {
        id: '1',
        text: currentLang.chatbot.welcome,
        sender: 'bot',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setChatMessages([welcomeMessage]);
    }
  }, [selectedLanguage]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages]);

  const handleSendMessage = () => {
    if (!currentMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: currentMessage,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setChatMessages(prev => [...prev, userMessage]);

    // Simple bot response logic
    setTimeout(() => {
      let botResponse = botResponses[selectedLanguage].help;

      const message = currentMessage.toLowerCase();
      if (message.includes('рдмреИрд▓реЗрдВрд╕') || message.includes('balance') || message.includes('роиро┐ро▓рпБро╡рпИ') || message.includes('ржмрзНржпрж╛рж▓рзЗржирзНрж╕')) {
        botResponse = botResponses[selectedLanguage].balance;
      } else if (message.includes('рд╕реАрдорд╛') || message.includes('limit') || message.includes('ро╡ро░роорзНржк') || message.includes('рж╕рзАржорж╛')) {
        botResponse = botResponses[selectedLanguage].limit;
      } else if (message.includes('рдЕрд╕рдлрд▓') || message.includes('failed') || message.includes('родрпЛро▓рпНро╡ро┐') || message.includes('ржмрзНржпрж░рзНрже')) {
        botResponse = botResponses[selectedLanguage].failed;
      }

      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date(),
        language: selectedLanguage
      };

      setChatMessages(prev => [...prev, botMessage]);
    }, 1000);

    setCurrentMessage('');
  };

  const handlePayment = () => {
    if (!paymentAmount || !recipientUpi) {
      alert(selectedLanguage === 'hindi' ? 'рдХреГрдкрдпрд╛ рд╕рднреА рдлреАрд▓реНрдб рднрд░реЗрдВ' : 
            selectedLanguage === 'tamil' ? 'родропро╡рпБроЪрпЖропрпНродрпБ роЕройрпИродрпНродрпБ рокрпБро▓роЩрпНроХро│рпИропрпБроорпН роиро┐ро░рокрпНрокро╡рпБроорпН' :
            'ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржм ржХрзНрж╖рзЗрждрзНрж░ ржкрзВрж░ржг ржХрж░рзБржи');
      return;
    }

    // Simulate payment processing
    alert(selectedLanguage === 'hindi' ? `тВ╣${paymentAmount} рдХрд╛ рднреБрдЧрддрд╛рди ${recipientUpi} рдХреЛ рд╕рдлрд▓рддрд╛рдкрзВрд░рзНрд╡рдХ рднреЗрдЬрд╛ рдЧрдпрд╛!` :
          selectedLanguage === 'tamil' ? `тВ╣${paymentAmount} ${recipientUpi} роХрпНроХрпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ!` :
          `тВ╣${paymentAmount} рж╕ржлрж▓ржнрж╛ржмрзЗ ${recipientUpi} ржП ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!`);
  };

  const startVoiceInput = () => {
    setIsListening(true);
    // Simulate voice input (in real app, you'd use Web Speech API)
    setTimeout(() => {
      setCurrentMessage(selectedLanguage === 'hindi' ? 'рдореЗрд░рд╛ рдмреИрд▓реЗрдВрд╕ рдХреНрдпрд╛ рд╣реИ?' :
                       selectedLanguage === 'tamil' ? 'роОройрпН роиро┐ро▓рпБро╡рпИ роОройрпНрой?' :
                       'ржЖржорж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржд?');
      setIsListening(false);
    }, 2000);
  };

  const speakMessage = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = selectedLanguage === 'hindi' ? 'hi-IN' : 
                      selectedLanguage === 'tamil' ? 'ta-IN' : 'bn-IN';
      speechSynthesis.speak(utterance);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
      <Header onWatchVideo={() => {}} />
      
      <div className="container mx-auto px-4 py-8">
        {/* Language Selector */}
        <div className="flex justify-center mb-8">
          <div className="flex space-x-2 bg-white rounded-lg p-1 shadow-lg">
            {Object.entries(languages).map(([key, lang]) => (
              <button
                key={key}
                onClick={() => setSelectedLanguage(key)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-all ${
                  selectedLanguage === key
                    ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white'
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <span>{lang.flag}</span>
                <span className="font-medium">{lang.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Main Content */}
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Payment Section */}
          <div className="space-y-6">
            <div className="text-center">
              <h1 className="text-4xl font-bold text-gray-900 mb-4">{currentLang.title}</h1>
              <p className="text-xl text-gray-600">{currentLang.subtitle}</p>
            </div>

            {/* Features */}
            <div className="grid grid-cols-3 gap-4">
              <Card className="text-center">
                <CardContent className="pt-6">
                  <Clock className="w-8 h-8 text-green-600 mx-auto mb-2" />
                  <p className="text-sm font-medium">{currentLang.features.instant}</p>
                </CardContent>
              </Card>
              <Card className="text-center">
                <CardContent className="pt-6">
                  <Shield className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                  <p className="text-sm font-medium">{currentLang.features.secure}</p>
                </CardContent>
              </Card>
              <Card className="text-center">
                <CardContent className="pt-6">
                  <Smartphone className="w-8 h-8 text-purple-600 mx-auto mb-2" />
                  <p className="text-sm font-medium">{currentLang.features.available}</p>
                </CardContent>
              </Card>
            </div>

            {/* Payment Form */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <QrCode className="w-6 h-6" />
                  <span>{currentLang.title}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">{currentLang.amount}</label>
                  <Input
                    type="number"
                    placeholder="тВ╣ 0"
                    value={paymentAmount}
                    onChange={(e) => setPaymentAmount(e.target.value)}
                    className="text-lg"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">{currentLang.recipient}</label>
                  <Input
                    placeholder="user@paytm"
                    value={recipientUpi}
                    onChange={(e) => setRecipientUpi(e.target.value)}
                  />
                </div>
                <Button
                  onClick={handlePayment}
                  className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-lg py-3"
                >
                  <Send className="w-5 h-5 mr-2" />
                  {currentLang.payNow}
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Chatbot Section */}
          <div className="relative">
            <Card className="h-[600px] flex flex-col">
              <CardHeader className="bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-t-lg">
                <CardTitle className="flex items-center space-x-2">
                  <MessageCircle className="w-6 h-6" />
                  <span>{currentLang.chatbot.title}</span>
                  <Badge variant="secondary" className="ml-auto">AI</Badge>
                </CardTitle>
              </CardHeader>
              
              <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
                {chatMessages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[80%] p-3 rounded-lg ${
                        message.sender === 'user'
                          ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      <p className="text-sm">{message.text}</p>
                      {message.sender === 'bot' && (
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => speakMessage(message.text)}
                          className="mt-2 h-6 text-xs"
                        >
                          <Volume2 className="w-3 h-3 mr-1" />
                          рд╕реБрдиреЗрдВ
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
                <div ref={chatEndRef} />
              </CardContent>

              <div className="border-t p-4">
                <div className="flex space-x-2">
                  <Input
                    placeholder={currentLang.chatbot.placeholder}
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    className="flex-1"
                  />
                  <Button
                    onClick={startVoiceInput}
                    disabled={isListening}
                    variant="outline"
                    size="icon"
                  >
                    <Mic className={`w-4 h-4 ${isListening ? 'text-red-500' : ''}`} />
                  </Button>
                  <Button onClick={handleSendMessage}>
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>

        {/* Additional Info */}
        <div className="mt-12 grid md:grid-cols-3 gap-6">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-3 mb-4">
                <CheckCircle className="w-8 h-8 text-green-600" />
                <h3 className="font-bold">
                  {selectedLanguage === 'hindi' ? 'рддреНрд╡рд░рд┐рдд рднреБрдЧрддрд╛рди' :
                   selectedLanguage === 'tamil' ? 'ро╡ро┐ро░рпИро╡ро╛рой роХроЯрпНроЯрогроорпН' :
                   'ржжрзНрж░рзБржд ржкрзЗржорзЗржирзНржЯ'}
                </h3>
              </div>
              <p className="text-gray-600">
                {selectedLanguage === 'hindi' ? '24/7 рддреБрд░рдВрдд рдкреИрд╕рд╛ рднреЗрдЬреЗрдВ рдФрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ' :
                 selectedLanguage === 'tamil' ? '24/7 роЙроЯройроЯро┐ропро╛роХ рокрогроорпН роЕройрпБрокрпНрокро╡рпБроорпН рооро▒рпНро▒рпБроорпН рокрпЖро▒ро╡рпБроорпН' :
                 '24/7 рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи ржПржмржВ ржЧрзНрж░рж╣ржг ржХрж░рзБржи'}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-3 mb-4">
                <Shield className="w-8 h-8 text-blue-600" />
                <h3 className="font-bold">
                  {selectedLanguage === 'hindi' ? 'рд╕реБрд░рдХреНрд╖рд╛ рдЧрд╛рд░рдВрдЯреА' :
                   selectedLanguage === 'tamil' ? 'рокро╛родрпБроХро╛рокрпНрокрпБ роЙродрпНродро░ро╡ро╛родроорпН' :
                   'ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐'}
                </h3>
              </div>
              <p className="text-gray-600">
                {selectedLanguage === 'hindi' ? 'рдмреИрдВрдХ-рдЧреНрд░реЗрдб рдПрдиреНрдХреНрд░рд┐рдкреНрд╢рди рдФрд░ рд╕реБрд░рдХреНрд╖рд╛' :
                 selectedLanguage === 'tamil' ? 'ро╡роЩрпНроХро┐-родро░ роХрпБро▒ро┐ропро╛роХрпНроХроорпН рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпБ' :
                 'ржмрзНржпрж╛ржВржХ-ржЧрзНрж░рзЗржб ржПржиржХрзНрж░рж┐ржкрж╢ржи ржПржмржВ ржирж┐рж░рж╛ржкрждрзНрждрж╛'}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-3 mb-4">
                <Languages className="w-8 h-8 text-purple-600" />
                <h3 className="font-bold">
                  {selectedLanguage === 'hindi' ? 'рднрд╛рд╖рд╛ рд╕рд╣рд╛рдпрддрд╛' :
                   selectedLanguage === 'tamil' ? 'роорпКро┤ро┐ роЖродро░ро╡рпБ' :
                   'ржнрж╛рж╖рж╛ рж╕рж╣рж╛ржпрж╝рждрж╛'}
                </h3>
              </div>
              <p className="text-gray-600">
                {selectedLanguage === 'hindi' ? 'рдЖрдкрдХреА рдорд╛рддреГрднрд╛рж╖рд╛ рдореЗрдВ UPI рд╕реЗрд╡рд╛' :
                 selectedLanguage === 'tamil' ? 'роЙроЩрпНроХро│рпН родро╛ропрпНроорпКро┤ро┐ропро┐ро▓рпН UPI роЪрпЗро╡рпИ' :
                 'ржЖржкржирж╛рж░ ржорж╛рждрзГржнрж╛рж╖рж╛ржпрж╝ UPI рж╕рзЗржмрж╛'}
              </p>
            </CardContent>
          </Card>
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default UpiPayment;
