
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { MessageCircle, Send, Mic, Volume2, X, Minimize2, Maximize2, Bot } from 'lucide-react';

interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  language: string;
}

interface AIMitraProps {
  isOpen: boolean;
  onToggle: () => void;
}

const AIMitra = ({ isOpen, onToggle }: AIMitraProps) => {
  const [selectedLanguage, setSelectedLanguage] = useState('hindi');
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  const languages = {
    hindi: {
      name: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
      flag: 'üáÆüá≥',
      welcome: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç AIMitra ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§',
      placeholder: '‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...',
      title: 'AIMitra - ‡§Ü‡§™‡§ï‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï'
    },
    tamil: {
      name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
      flag: 'üáÆüá≥',
      welcome: '‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç AIMitra. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.',
      placeholder: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø‡ÆØ‡Øà ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç...',
      title: 'AIMitra - ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç'
    },
    bengali: {
      name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
      flag: 'üáÆüá≥',
      welcome: '‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶Æ‡¶ø AIMitra‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø‡•§',
      placeholder: '‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®...',
      title: 'AIMitra - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï'
    },
    gujarati: {
      name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',
      flag: 'üáÆüá≥',
      welcome: '‡™®‡™Æ‡™∏‡´ç‡™§‡´á! ‡™π‡´Å‡™Ç AIMitra ‡™õ‡´Å‡™Ç‡•§ ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™≠‡™æ‡™∑‡™æ‡™Æ‡™æ‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™∏‡™π‡™æ‡™Ø ‡™ï‡™∞‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™Ö‡™π‡´Ä‡™Ç ‡™õ‡´Å‡™Ç‡•§',
      placeholder: '‡™Ö‡™π‡´Ä‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™∏‡™Ç‡™¶‡´á‡™∂ ‡™ü‡™æ‡™á‡™™ ‡™ï‡™∞‡´ã...',
      title: 'AIMitra - ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™≠‡™æ‡™∑‡™æ ‡™∏‡™π‡™æ‡™Ø‡™ï'
    },
    marathi: {
      name: '‡§Æ‡§∞‡§æ‡§†‡•Ä',
      flag: 'üáÆüá≥',
      welcome: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä AIMitra ‡§Ü‡§π‡•á‡•§ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§∑‡•á‡§§ ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•á‡§•‡•á ‡§Ü‡§π‡•á‡•§',
      placeholder: '‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡•á‡§•‡•á ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§æ...',
      title: 'AIMitra - ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï'
    }
  };

  const currentLang = languages[selectedLanguage as keyof typeof languages];

  const botResponses: { [key: string]: { [key: string]: string } } = {
    hindi: {
      greeting: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç AIMitra ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?',
      help: '‡§Æ‡•à‡§Ç ‡§≠‡§æ‡§∑‡§æ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ, ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§',
      translation: '‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§',
      tech: '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç‡•§'
    },
    tamil: {
      greeting: '‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç AIMitra. ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç?',
      help: '‡Æ®‡Ææ‡Æ©‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡ØÅ, ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™ ‡Æâ‡Æ§‡Æµ‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ§‡ØÅ‡Æµ‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç.',
      translation: '‡Æ®‡Ææ‡Æ©‡Øç ‡Æ™‡Æ≤‡Øç‡Æµ‡Øá‡Æ±‡ØÅ ‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡Øà ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
      tech: '‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™ ‡Æâ‡Æ§‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ, ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æø‡Æ©‡Øà‡ÆØ‡Øà ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æï ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.'
    },
    bengali: {
      greeting: '‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶Æ‡¶ø AIMitra‡•§ ‡¶Ü‡¶ú ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?',
      help: '‡¶Ü‡¶Æ‡¶ø ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶, ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§',
      translation: '‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§',
      tech: '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶¶‡¶ø‡¶®‡•§'
    },
    gujarati: {
      greeting: '‡™®‡™Æ‡™∏‡´ç‡™§‡´á! ‡™π‡´Å‡™Ç AIMitra ‡™õ‡´Å‡™Ç‡•§ ‡™Ü‡™ú‡´á ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç?',
      help: '‡™π‡´Å‡™Ç ‡™≠‡™æ‡™∑‡™æ ‡™Ö‡™®‡´Å‡™µ‡™æ‡™¶, ‡™§‡™ï‡™®‡´Ä‡™ï‡´Ä ‡™∏‡™π‡™æ‡™Ø ‡™Ö‡™®‡´á ‡™∏‡™æ‡™Æ‡™æ‡™®‡´ç‡™Ø ‡™Æ‡™æ‡™π‡™ø‡™§‡´Ä‡™Æ‡™æ‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç‡•§',
      translation: '‡™π‡´Å‡™Ç ‡™µ‡™ø‡™µ‡™ø‡™ß ‡™≠‡™æ‡™∞‡™§‡´Ä‡™Ø ‡™≠‡™æ‡™∑‡™æ‡™ì‡™Æ‡™æ‡™Ç ‡™Ö‡™®‡´Å‡™µ‡™æ‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç. ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™ï‡™π‡´ã ‡™ï‡´á ‡™§‡™Æ‡´á ‡™∂‡´Å‡™Ç ‡™Ö‡™®‡´Å‡™µ‡™æ‡™¶ ‡™ï‡™∞‡™µ‡™æ ‡™Æ‡™æ‡™Ç‡™ó‡´ã ‡™õ‡´ã.',
      tech: '‡™§‡™ï‡™®‡´Ä‡™ï‡´Ä ‡™∏‡™π‡™æ‡™Ø ‡™Æ‡™æ‡™ü‡´á, ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ‡™®‡´Å‡™Ç ‡™µ‡™ø‡™ó‡™§‡™µ‡™æ‡™∞ ‡™µ‡™∞‡´ç‡™£‡™® ‡™ï‡™∞‡´ã.'
    },
    marathi: {
      greeting: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä AIMitra ‡§Ü‡§π‡•á‡•§ ‡§Ü‡§ú ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§ï‡§∂‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã?',
      help: '‡§Æ‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶, ‡§§‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï ‡§Æ‡§¶‡§§ ‡§Ü‡§£‡§ø ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§§ ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡•§',
      translation: '‡§Æ‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§æ‡§Ø ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•á ‡§Ü‡§π‡•á.',
      tech: '‡§§‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï ‡§Æ‡§¶‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡•á‡§ö‡•á ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡§æ.'
    }
  };

  useEffect(() => {
    if (chatMessages.length === 0 && isOpen) {
      const welcomeMessage: ChatMessage = {
        id: '1',
        text: currentLang.welcome,
        sender: 'bot',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setChatMessages([welcomeMessage]);
    }
  }, [selectedLanguage, isOpen]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages]);

  const handleSendMessage = () => {
    if (!currentMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: currentMessage,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setChatMessages(prev => [...prev, userMessage]);

    // Bot response logic
    setTimeout(() => {
      let botResponse = botResponses[selectedLanguage].help;

      const message = currentMessage.toLowerCase();
      if (message.includes('‡§®‡§Æ‡§∏‡•ç‡§§‡•á') || message.includes('hello') || message.includes('hi') || message.includes('‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç') || message.includes('‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞')) {
        botResponse = botResponses[selectedLanguage].greeting;
      } else if (message.includes('‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶') || message.includes('translate') || message.includes('‡§Æ‡Øä‡Æ¥‡¶ø‡Æ™‡ØÜ‡§Ø‡Æ∞‡•ç‡¶™‡•ç‡§™‡ØÅ') || message.includes('‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶')) {
        botResponse = botResponses[selectedLanguage].translation;
      } else if (message.includes('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä') || message.includes('tech') || message.includes('‡§§‡Øä‡§ù‡•Ä‡§≤‡•ç‡§®‡•Å‡¶ü‡•ç‡§™–∞') || message.includes('‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø')) {
        botResponse = botResponses[selectedLanguage].tech;
      }

      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date(),
        language: selectedLanguage
      };

      setChatMessages(prev => [...prev, botMessage]);
    }, 1000);

    setCurrentMessage('');
  };

  const startVoiceInput = () => {
    setIsListening(true);
    setTimeout(() => {
      setCurrentMessage(selectedLanguage === 'hindi' ? '‡§Æ‡•Å‡§ù‡•á ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è' :
                       selectedLanguage === 'tamil' ? '‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡Æø ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç' :
                       selectedLanguage === 'bengali' ? '‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá' :
                       selectedLanguage === 'gujarati' ? '‡™Æ‡™®‡´á ‡™Æ‡™¶‡™¶ ‡™ú‡´ã‡™à‡™è' :
                       '‡§Æ‡§≤‡§æ ‡§Æ‡§¶‡§§ ‡§π‡§µ‡•Ä');
      setIsListening(false);
    }, 2000);
  };

  const speakMessage = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = selectedLanguage === 'hindi' ? 'hi-IN' : 
                      selectedLanguage === 'tamil' ? 'ta-IN' : 
                      selectedLanguage === 'bengali' ? 'bn-IN' :
                      selectedLanguage === 'gujarati' ? 'gu-IN' : 'mr-IN';
      speechSynthesis.speak(utterance);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <Card className={`w-96 transition-all duration-300 ${isMinimized ? 'h-16' : 'h-[500px]'} flex flex-col shadow-2xl border-2 border-orange-200`}>
        <CardHeader className="bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-t-lg p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bot className="w-6 h-6" />
              <div>
                <CardTitle className="text-sm font-bold">AIMitra</CardTitle>
                <p className="text-xs opacity-90">‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï</p>
              </div>
            </div>
            <div className="flex items-center space-x-1">
              <Badge variant="secondary" className="text-xs">AI</Badge>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => setIsMinimized(!isMinimized)}
                className="h-6 w-6 p-0 text-white hover:bg-white/20"
              >
                {isMinimized ? <Maximize2 className="w-3 h-3" /> : <Minimize2 className="w-3 h-3" />}
              </Button>
              <Button
                size="sm"
                variant="ghost"
                onClick={onToggle}
                className="h-6 w-6 p-0 text-white hover:bg-white/20"
              >
                <X className="w-3 h-3" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            {/* Language Selector */}
            <div className="p-2 border-b">
              <div className="flex space-x-1 overflow-x-auto">
                {Object.entries(languages).map(([key, lang]) => (
                  <button
                    key={key}
                    onClick={() => setSelectedLanguage(key)}
                    className={`flex items-center space-x-1 px-2 py-1 rounded text-xs whitespace-nowrap transition-all ${
                      selectedLanguage === key
                        ? 'bg-orange-500 text-white'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    <span>{lang.flag}</span>
                    <span>{lang.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Chat Messages */}
            <CardContent className="flex-1 overflow-y-auto p-3 space-y-2">
              {chatMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-2 rounded-lg text-sm ${
                      message.sender === 'user'
                        ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <p>{message.text}</p>
                    {message.sender === 'bot' && (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => speakMessage(message.text)}
                        className="mt-1 h-5 text-xs p-0"
                      >
                        <Volume2 className="w-3 h-3 mr-1" />
                        ‡§∏‡•Å‡§®‡•á‡§Ç
                      </Button>
                    )}
                  </div>
                </div>
              ))}
              <div ref={chatEndRef} />
            </CardContent>

            {/* Input Area */}
            <div className="border-t p-3">
              <div className="flex space-x-2">
                <Input
                  placeholder={currentLang.placeholder}
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="flex-1 text-sm"
                />
                <Button
                  onClick={startVoiceInput}
                  disabled={isListening}
                  variant="outline"
                  size="sm"
                  className="px-2"
                >
                  <Mic className={`w-4 h-4 ${isListening ? 'text-red-500' : ''}`} />
                </Button>
                <Button onClick={handleSendMessage} size="sm" className="px-2">
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        )}
      </Card>
    </div>
  );
};

export default AIMitra;
